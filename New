aws ec2 create-key-pair --key-name u-key-pair --query "KeyMaterial" --output text > u-key-pair.pem



Lamda template:  


AWSTemplateFormatVersion: '2010-09-09'
Resources:  
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: code2.lambda_handler
      Code:
        S3Bucket: 'nivas-stelligent'
        S3Key: 'code2.zip'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AmazonS3ObjectLambdaExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt Lambda.Arn
  
  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: NivasApiGateway
  
  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties: 
      HttpMethod: ANY
      Integration: 
        Type: AWS
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: "200"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"

      OperationName: hello
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      RestApiId: !Ref ApiGatewayRestApi
      MethodResponses:
        - StatusCode: "200"
      AuthorizationType: AWS_IAM
  
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:invokeFunction
      FunctionName: !Ref Lambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}"
  
  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties: 
      RestApiId: !Ref ApiGatewayRestApi
    DependsOn: ApiGatewayMethod

  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: tablelab09
      AttributeDefinitions:
        - AttributeName: item
          AttributeType: S
      KeySchema:
        - AttributeName: item
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5



python code:

import boto3
import json

def lambda_handler(event, context):
    db = boto3.client('dynamodb')

    db.put_item(TableName = 'tablelab09', Item = {'item': {'S': event['body']}})}
    
    
    
   

Requirements:

Lab 9.2.2: Lambda via CloudWatch Rules
CloudWatch rules can be used to call Lambda functions based on events.

Add a CloudWatch rule to the template which targets your Lambda function when the S3 PutObject operation is called. If a trail doesn't exist for this, you may need to create one.

Modify your Lambda handler to log some of the event data to the DynamoDB.

Create an S3 bucket and test that the Lambda logs event data to the DB.

Lab 9.2.3: Query data with Lambda and API Gateway
Write another Lambda function that will query the DynamoDB table:

The function should take a pattern (for instance, a bucket name) and return all events for that pattern.

Add an API gateway that calls the Lambda to query the data.
