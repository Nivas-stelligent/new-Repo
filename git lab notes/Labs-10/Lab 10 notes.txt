
Sample ruby file:

require 'aws-sdk-s3'
require 'aws-sdk-kms'
# Set up AWS credentials
Aws.config.update({
  region: 'us-east-1',
  credentials: Aws::Credentials.new('ACCESS_KEY_ID', 'SECRET_ACCESS_KEY')
})
# Set up S3 client
s3 = Aws::S3::Client.new
# Set up KMS client
kms = Aws::KMS::Client.new
# Set up file paths
local_file_path = '/path/to/local/file.txt'
s3_bucket_name = 'my-s3-bucket'
s3_key_name = 'encrypted-file.txt'
# Encrypt local file and upload to S3
plaintext = File.read(local_file_path)
kms_key_id = 'alias/Labs10Key'
ciphertext_blob = kms.encrypt(key_id: kms_key_id, plaintext: plaintext).ciphertext_blob
s3.put_object(bucket: s3_bucket_name, key: s3_key_name, body: ciphertext_blob)
# Read back encrypted ciphertext from S3
response = s3.get_object(bucket: s3_bucket_name, key: s3_key_name)
ciphertext_blob = response.body.read
# Pull down and decrypt file, saving as another name
plaintext = kms.decrypt(ciphertext_blob: ciphertext_blob).plaintext
File.write('/path/to/decrypted/file.txt', plaintext)

SampleRuby from git:

require 'aws-sdk-s3'

bucket_name = 'joels-encryption-bucket'
object_key = 'secret.txt'
region = 'us-east-1'
kms_key_id = '6ff84455-5648-47f2-aa41-5c06d0bdcf5a'

# Yes the following lines are ugly as sin, but I couldn't find a way to use the temp profile besides this - JW
access_key_id = IO.readlines("|cat ~/.aws/credentials | grep -A 6 temp | grep aws_access_key_id | cut -d = -f 2 | tr -d [:space:]")*","
secret_access_key = IO.readlines("|cat ~/.aws/credentials | grep -A 6 temp | grep aws_secret_access_key | cut -d = -f 2 | sed 's/[^a-zA-Z0-9/+]//g'|tr -d [:space:]")*","
session_token = IO.readlines("|cat ~/.aws/credentials | grep -A 6 temp | grep session_token | cut -d = -f 2 | sed 's/[^a-zA-Z0-9/+]//g'| tr -d [:space:]")*","
object_content = File.read(object_key)

s3_encryption_client = Aws::S3::EncryptionV2::Client.new(
    region: region,
    kms_key_id: kms_key_id,
    key_wrap_schema: :kms_context,
    content_encryption_schema: :aes_gcm_no_padding,
    security_profile: :'v2',
    access_key_id: access_key_id,
    secret_access_key: secret_access_key,
    session_token: session_token
   )

  s3_encryption_client.put_object(
    bucket: bucket_name,
    key: object_key,
    body: object_content
  )

  response = s3_encryption_client.get_object(
    bucket: bucket_name,
    key: object_key
  )

  puts response.body.read
  
  
  
  
  10.1.1 - 10.1.2:

aws cloudformation create-stack --stack-name test-KMS-stack --template-body file://labs10.1.1-10.1.2-template.yaml --region us-east-1 --capabilities CAPABILITY_NAMED_IAM

10.1.3:

aws kms encrypt --key-id alias/Labs10Key --plaintext fileb://unencrypted_file.txt --output text --query CiphertextBlob | base64 --decode > encrypted_secret_file

10.1.4:

aws kms decrypt --key-id alias/Labs10Key --ciphertext-blob fileb://encrypted_secret_file --output text --query Plaintext | base64 --decode >unencrypted_secret_file


Labs 7:-

7.1.1:

aws cloudformation create-stack --stack-name test-ALB-stack --template-body file://lab7.1.1-ALB-template.yaml --region us-east-1

7.1.2:

aws cloudformation update-stack --stack-name test-ALB-stack --template-body file://lab7.1.2-ALB-template.yaml --region us-east-1

7.1.3:

aws cloudformation update-stack --stack-name test-ALB-stack --template-body file://lab7.1.3-ALB-template.yaml --region us-east-1

Labs 8:-

8.1.1:

aws logs create-log-group --log-group-name nivas.stelligent.c9logs --tags Name=nivas-log-group

aws logs create-log-stream --log-group-name nivas.stelligent.c9logs --log-stream-name c9.training

aws logs describe-log-groups --log-group-name nivas.stelligent.c9logs

aws logs describe-log-streams --log-group-name nivas.stelligent.c9logs --log-stream-name c9.training

8.1.2:

aws cloudformation create-stack --stack-name test-cw-stack --template-body file://lab8.1.2-template.yaml --parameters file://lab8.1.2-ec2-params.json --region us-east-1 --capabilities CAPABILITY_NAMED_IAM

8.1.3:

pip install awslogs

awslogs groups --aws-region us-east-1

awslogs streams nivas.stelligent.c9logs --aws-region us-east-1

awslogs get nivas.stelligent.c9logs ALL --aws-region us-east-1 --start='5m'

awslogs get nivas.stelligent.c9logs ALL --aws-region us-east-1 --start='20m'

awslogs get nivas.stelligent.c9logs ALL --aws-region us-east-1 --start='1h'

8.1.4:

aws logs put-retention-policy --log-group-name nivas.stelligent.c9logs --retention-in-days 60

aws logs put-retention-policy --log-group-name nivas.stelligent.c9logs --retention-in-days 3653

aws logs describe-log-groups --log-group-name nivas.stelligent.c9logs

aws logs delete-log-group --log-group-name nivas.stelligent.c9logs

8.2.1:

aws cloudformation create-stack --stack-name test-cw-stack --template-body file://lab8.2.1-template.yaml --parameters file://lab8.2.1-params.json --region us-east-1 --capabilities CAPABILITY_NAMED_IAM

8.2.2:

aws cloudformation create-stack --stack-name teststack --template-body file://lab8.2.2-template.yaml

Labs 9:-

9.1.2:

aws cloudformation create-stack --stack-name test-lambda-stack --template-body file://lab9.1.2-template.yaml --region us-east-1 --capabilities CAPABILITY_NAMED_IAM

9.1.3:

aws cloudformation create-stack --stack-name test-lambda-stack --template-body file://lab9.1.3-template.yaml --region us-east-1 --capabilities CAPABILITY_NAMED_IAM

9.2.1:

aws cloudformation create-stack --stack-name test-lambda-stack --template-body file://lab9.2.1-template.yaml --region us-east-1 --capabilities CAPABILITY_NAMED_IAM



