
AWSTemplateFormatVersion: '2010-09-09'
Description: Introduction to Load Balancers Template

Resources:
  WebServerAsg:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: 'AutomationBoxes'
      VPCZoneIdentifier:
        - 'subnet-0f8aa886031bb1954' 
        - 'subnet-09bfbfa05f99f0910'
      DesiredCapacity: '3'
      HealthCheckType: 'ELB'
      HealthCheckGracePeriod: 30 
      LaunchConfigurationName: !Ref WebServersLC
      MaxSize: '3'
      MinSize: '3'
      TargetGroupARNs:
        - !Ref TargetGroup

  WebServersLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: 'ami-0abfd868f654b92be'
      InstanceType: 't2.micro'
      LaunchConfigurationName: 'SimpleWebServerLC'
      SecurityGroups:
        - 'sg-05d3389a4f583dfbe'
      UserData: 
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe

            yum install -y nginx

            yum install -y aws-cfn-bootstrap

            # Install the files and packages from the metadata
            /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --configsets All \
              --region ${AWS::Region}

            # Signal the status from cfn-init
            /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource WebServersLC \
              --region ${AWS::Region}
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureStelligentProject
        ConfigureStelligentProject:
          packages:
            yum:
              nginx: []
          files:
            /usr/share/nginx/html/index.html:
              content: '<p>Automation for the People</p>'
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /BADindex.html
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: "Name"
          Value: "nivas-target_group"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      UnhealthyThresholdCount: 3
      VpcId: vpc-0e83796d42348c391
    DependsOn:
      - WebServerALB

  WebServerALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: 
        - sg-05d3389a4f583dfbe
      Subnets: 
        - subnet-0f8aa886031bb1954 
        - subnet-09bfbfa05f99f0910
      Tags:
        - Key: "Name"
          Value: "nivas-application-load-balancer"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref WebServerALB
      Port: 80
      Protocol: HTTP